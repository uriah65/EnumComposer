
Thanks Giacomo Stelluti Scala for the nice CommandLineParserLibrary
https://commandline.codeplex.com/license
https://github.com/gsscoder/commandline


Thanks for Roslyn introduction:
https://joshvarty.wordpress.com/learn-roslyn-now/

Some related and/or interesting links to check:
http://www.codeproject.com/Articles/417283/Creating-Enums-from-Database-Lookup-Tables
http://www.codeproject.com/Articles/281656/Using-DescriptionAttribute-for-enumerations-bound
http://www.codeproject.com/Articles/16225/Enum-Code-Generator-Generating-enum-code-automatic
http://www.codeproject.com/Articles/136181/Human-readable-Enumeration-Meta-data

Some enum ideas
http://stackoverflow.com/questions/1799370/getting-attributes-of-enums-value

Validation of C# identifiers
http://stackoverflow.com/questions/1904252/is-there-a-method-in-c-sharp-to-check-if-a-string-is-a-valid-identifier

On VS Gallery
1). Coding, Programming, Scaffolding

2). Code Generator, C#, Enum, Enumeration

3). 
Enumeration Composer allows to generate and update enum definitions in C# code files by query a SQL Server tables or other ODBC/OledDb data sources. An enumeration can be associated with a SQL SELECT statement which will define enumeration options.

[EnumSqlSelect("SELECT lkc__id, lkc_name, lkc_description FROM T_AwayType")]
public enum AwayTypeEnum
{
    [Description("Someday ...")]             <-- values and descriptions generated from SQL
    Administrative = 4,
    [Description("The best way to be away")]
    Vacation = 5,
    //[Description("Write away ...")]        <-- comments are preseved
    //WritingDay = 6,	
}

To reduce pollution of the C# code with unnecessary definitions EnumComposer preserves commented enumeration options during updates. Look-up tables could be large, and not all options are used in the code at the moment. Commented options will be honored by EnumComposer in consecutive updates.

https://github.com/uriah65/EnumComposer/wiki